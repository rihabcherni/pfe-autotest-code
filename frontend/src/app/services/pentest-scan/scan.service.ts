import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, Observable } from 'rxjs';
import { saveAs } from 'file-saver';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ScanService {
 private apiUrl = `${environment.apiUrl}`;

  constructor(private http: HttpClient) {}
  startScan(requestBody: { url: string, username?: string, password?: string, token_auth?: string, cookies?: string }): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/scan/`, requestBody);
  }
  getCurrentScanStatus(): Observable<string> {
    return this.http.get<{ status: string }>('/scan/status')
      .pipe(map(response => response.status));
  }

  getReport(): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/scan/reportFinal`);
  }
  private encryptToken(token: string): { encryptedToken: string, encryptionKey: string, iv: string } {
    const encryptionKey = CryptoJS.lib.WordArray.random(16);
    const iv = CryptoJS.lib.WordArray.random(16);

    const encryptedToken = CryptoJS.AES.encrypt(token, encryptionKey, {
      iv,
      mode: CryptoJS.mode.CBC,
      padding: CryptoJS.pad.Pkcs7
    }).toString();

    return {
      encryptedToken,
      encryptionKey: encryptionKey.toString(),
      iv: iv.toString(CryptoJS.enc.Hex)
    };
  }

  configureSlack(token: string, channel_id: string): Observable<any> {
    const { encryptedToken, encryptionKey, iv } = this.encryptToken(token);
    const request = { encryptedToken, channel_id, encryptionKey, iv };
    return this.http.post<any>(`${this.apiUrl}/config_slack/`, request);
  }

  configureJira(JIRA_EMAIL: string, token: string, JIRA_DOMAIN: string, JIRA_PROJECT_KEY: string, JIRA_BOARD: string): Observable<any> {
    const { encryptedToken, encryptionKey, iv } = this.encryptToken(token);
    const request = { JIRA_EMAIL, encryptedToken, JIRA_DOMAIN, encryptionKey, iv, JIRA_PROJECT_KEY ,JIRA_BOARD};
    return this.http.post<any>(`${this.apiUrl}/config_jira/`, request);
  }

  configureEmails(emails: string[]): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/config_emails/`, { emails });
  }
  getAllReports(): Observable<Report[]> {
    const url = `${this.apiUrl}/reports`; 
    return this.http.get<Report[]>(url);
  }
  getUserReports(): Observable<Report[]> {
    return this.http.get<Report[]>(`${this.apiUrl}/user/reports`);
  }
  downloadReport(reportId: number): void {
    this.http.get(`${this.apiUrl}/download/${reportId}`, { responseType: 'blob' })
      .subscribe(blob => {
        saveAs(blob, `report_${reportId}.json`);
      });
  }
  deleteReport(reportId: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/reports/${reportId}`);
  }
}