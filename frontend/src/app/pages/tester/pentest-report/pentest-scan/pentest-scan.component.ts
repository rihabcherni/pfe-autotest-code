import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { ScanService } from '../../../../services/pentest-scan/scan.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TitleComponent } from "../../../../components/shared/title/title.component";
import { ScanTool } from '../../../../models/pentest-scan';
import { SecurityPreferences } from '../../../../models/security-preferences.model';
import { SecurityPreferencesService } from '../../../../services/security-preferences/security-preferences.service';
import { Subject, takeUntil } from 'rxjs';

@Component({
  selector: 'app-pentest-scan',
  standalone: true,
  imports: [FormsModule, CommonModule, TitleComponent],
  providers: [],
  templateUrl: './pentest-scan.component.html',
  styleUrls: ['./pentest-scan.component.css']
})
export class PentestScanComponent implements OnInit, OnDestroy {
  titleValue = 'Security Scanner';
  scanInProgress = false;
  url: string = '';
  username: string = '';  
  password: string = '';  
  token_auth: string = '';  
  cookies: string = '';  
  authMethod: string = '';
  errorMessage: string = '';
  scanningMessage: string = '';
  selectedButton: string | null = null;
  selectedTab: string = 'scan';
  threads: number = 4;
  crawl: boolean = true;
  
  private destroy$ = new Subject<void>();
  
  securityPreferences: SecurityPreferences = {
    depth_crawl: 3,
    zap_dc: 5,
    zap_d: 5,
    wapiti_scan_time: 5,
    wapiti_level: 2,
    sqlmap_level: 3,
    sqlmap_risk: 3,
    sqlmap_threads: 5,
    sqlmap_technique: 'BEUSTQ',
    nikto_timeout: 300,
    nuclei_rate_limit: 100,
    nmap_timing: 4,
    whatweb_aggression: 3,
    pwnxss_threads: 10,
    outils_securite_favoris: []
  };
  
  securityPreferencesLoading = false;
  securityPreferencesSaving = false;
  successMessage: string = '';

  scanTools: ScanTool[] = [
    {
      id: 'zap',
      name: 'ZAP',
      selected: false,
      description: 'OWASP Zed Attack Proxy for finding security vulnerabilities in web apps.',
      iconUrl: 'assets/img/tools/zap.png',
      width: 70
    },
    {
      id: 'wapiti',
      name: 'Wapiti',
      selected: false,
      description: 'Performs black-box scans to find vulnerabilities in web applications.',
      iconUrl: 'assets/img/tools/wapiti.png',
      width: 100
    },
    {
      id: 'nikto',
      name: 'Nikto',
      selected: true,
      description: 'Scans web servers for known vulnerabilities and misconfigurations.',
      iconUrl: 'assets/img/tools/nikto.png',
      width: 70
    },
    {
      id: 'nmap',
      name: 'Nmap',
      selected: true,
      description: 'Performs network discovery, port scanning, and security auditing.',
      iconUrl: 'assets/img/tools/nmap.png',
      width: 110
    },
    {
      id: 'nuclei',
      name: 'Nuclei',
      selected: true,
      description: 'Fast and customizable vulnerability scanner using YAML templates.',
      iconUrl: 'assets/img/tools/nuclei.png',
      width: 120
    },
    {
      id: 'pwnxss',
      name: 'PwnXSS',
      selected: true,
      description: 'Automated tool for detecting and exploiting XSS vulnerabilities.',
      iconUrl: 'assets/img/tools/PwnXSS.png',
      width: 120
    },
    {
      id: 'sqlmap',
      name: 'SQLMap',
      selected: true,
      description: 'Automated tool for detecting and exploiting SQL injection flaws.',
      iconUrl: 'assets/img/tools/sqlmap.png',
      width: 140
    },
    {
      id: 'xsstrike',
      name: 'XSStrike',
      selected: true,
      description: 'Advanced tool for finding and exploiting XSS vulnerabilities.',
      iconUrl: 'assets/img/tools/XSStrike.png',
      width: 70
    },
    {
      id: 'whatweb',
      name: 'Whatweb',
      selected: true,
      description: 'Identifies technologies used by a website to support reconnaissance.',
      iconUrl: 'assets/img/tools/Whatweb.png',
      width: 150
    },
    {
      id: 'wafw00f',
      name: 'Wafw00f',
      selected: true,
      description: 'Detects Web Application Firewalls (WAFs) protecting a target website.',
      iconUrl: 'assets/img/tools/wafw00f.png',
      width: 80
    }
  ];

  constructor(
    private scanService: ScanService,
    private securityPreferencesService: SecurityPreferencesService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.checkScanStatus(); 
    this.loadSecurityPreferences();
    this.securityPreferencesService.advancedOptions$
      .pipe(takeUntil(this.destroy$))
      .subscribe(options => {
        this.securityPreferences = { ...options };
      });
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  checkScanStatus(): void {
    this.scanService.getCurrentScanStatus().subscribe({
      next: (status) => {
        this.scanInProgress = status === 'running';
      },
      error: (error) => {
        console.error('Error checking scan status:', error);
        this.scanInProgress = false;
      }
    });
  }

  loadSecurityPreferences(): void {
    this.securityPreferencesLoading = true;
    this.errorMessage = '';
    
    this.securityPreferencesService.getAdvancedOptions()
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (options) => {
          this.securityPreferences = { ...options };
          this.securityPreferencesLoading = false;
          console.log('Advanced options loaded successfully');
        },
        error: (error) => {
          console.error('Error loading advanced options:', error);
          this.securityPreferencesLoading = false;
          this.errorMessage = 'Could not load saved preferences. Using default values.';
        }
      });
  }

  onSubmit(): void {
    this.errorMessage = '';
    this.successMessage = '';

    if (this.scanInProgress) {
      this.errorMessage = 'A scan is already in progress. Please wait.';
      return;
    }
    if (!this.url.trim()) {
      this.errorMessage = 'URL is required.';
      return;
    }

    const selectedTools = this.scanTools.filter(tool => tool.selected).map(tool => tool.id);
    if (selectedTools.length === 0) {
      this.errorMessage = 'Please select at least one scanning tool.';
      return;
    }
    if (this.authMethod === 'password' && (!this.username.trim() || !this.password.trim())) {
      this.errorMessage = 'Please provide both username and password.';
      return;
    }

    if (this.authMethod === 'token' && !this.token_auth.trim()) {
      this.errorMessage = 'Please provide an authentication token.';
      return;
    }

    if (this.authMethod === 'cookies' && !this.cookies.trim()) {
      this.errorMessage = 'Please provide cookies.';
      return;
    }
    const validation = this.validateAllOptions();
    if (!validation.isValid) {
      this.errorMessage = `Invalid configuration: ${validation.errors.join(', ')}`;
      return;
    }

    this.scanInProgress = true;
    let requestBody: any = { 
      url: this.url.trim(),
      scan_tools: selectedTools,
      scan_options: {
        threads: this.threads,
        crawl: this.crawl,
      },
      advanced_options: this.securityPreferences
    };
    if (this.authMethod === 'password') {
      requestBody.username = this.username.trim();
      requestBody.password = this.password;
    } else if (this.authMethod === 'token') {
      requestBody.token_auth = this.token_auth.trim();
    } else if (this.authMethod === 'cookies') {
      requestBody.cookies = this.cookies.trim();
    }

    console.log('Starting scan with configuration:', requestBody);
    
    this.scanService.startScan(requestBody)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          this.scanInProgress = false;
          console.log('Scan started successfully:', response);
          this.successMessage = 'Scan started successfully! Redirecting to results...';
          setTimeout(() => {
            this.router.navigate(['/tester/pentest-scan-results', response.report_id]);
          }, 1500);
        },
        error: (error) => {
          this.scanInProgress = false;
          console.error('Error starting scan:', error);
          
          if (error.error?.message) {
            this.errorMessage = error.error.message;
          } else if (error.message) {
            this.errorMessage = error.message;
          } else {
            this.errorMessage = 'An error occurred while submitting the scan request.';
          }
        }
      });
  }

  toggleToolSelection(tool: ScanTool): void {
    tool.selected = !tool.selected;
    this.selectedButton = null;
  }

  selectAllTools(): void {
    this.scanTools.forEach(tool => tool.selected = true);
    this.selectedButton = 'select';
  }

  deselectAllTools(): void {
    this.scanTools.forEach(tool => tool.selected = false);
    this.selectedButton = 'deselect';
  }

  saveSecurityPreferences(): void {
    this.errorMessage = '';
    this.successMessage = '';
    const validation = this.validateAllOptions();
    if (!validation.isValid) {
      this.errorMessage = `Cannot save invalid configuration: ${validation.errors.join(', ')}`;
      return;
    }

    this.securityPreferencesSaving = true;
    
    this.securityPreferencesService.saveAdvancedOptions(this.securityPreferences)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          this.securityPreferencesSaving = false;
          this.securityPreferences = { ...response };
          this.showSuccessMessage('Advanced options saved successfully!');
          console.log('Advanced options saved successfully');
        },
        error: (error) => {
          this.securityPreferencesSaving = false;
          console.error('Error saving advanced options:', error);
          
          if (error.message) {
            this.errorMessage = error.message;
          } else {
            this.errorMessage = 'Failed to save advanced options. Please try again.';
          }
        }
      });
  }

  resetSecurityPreferences(): void {
    this.errorMessage = '';
    this.successMessage = '';
    this.securityPreferencesLoading = true;
    
    this.securityPreferencesService.resetToDefaults()
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (defaultOptions) => {
          this.securityPreferences = { ...defaultOptions };
          this.securityPreferencesLoading = false;
          this.showSuccessMessage('Advanced options reset to defaults!');
          console.log('Advanced options reset to defaults');
        },
        error: (error) => {
          this.securityPreferencesLoading = false;
          console.error('Error resetting advanced options:', error);
          
          if (error.message) {
            this.errorMessage = error.message;
          } else {
            this.errorMessage = 'Failed to reset advanced options. Please try again.';
          }
        }
      });
  }

  private showSuccessMessage(message: string): void {
    this.successMessage = message;
    setTimeout(() => {
      this.successMessage = '';
    }, 5000);
  }

  validateAdvancedOption(field: string, value: any): boolean {
    const validation = this.securityPreferencesService.validateAdvancedOption(field, value);
    return validation.isValid;
  }

  getValidationErrorMessage(field: string, value: any): string | undefined {
    const validation = this.securityPreferencesService.validateAdvancedOption(field, value);
    return validation.errorMessage;
  }

  validateAllOptions(): { isValid: boolean; errors: string[] } {
    return this.securityPreferencesService.validateAllOptions(this.securityPreferences);
  }
  hasValidationError(field: string, value: any): boolean {
    return !this.validateAdvancedOption(field, value);
  }
  getFieldValidationClass(field: string, value: any): string {
    const validation = this.securityPreferencesService.validateAdvancedOption(field, value);
    return validation.isValid ? 'is-valid' : 'is-invalid';
  }
}