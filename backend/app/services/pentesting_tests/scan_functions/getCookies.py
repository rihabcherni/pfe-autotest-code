import mechanize
import json
from fastapi import HTTPException
from fastapi import HTTPException
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# def get_cookies_after_login(login_url: str, username_value: str, password_value: str):
#     br = mechanize.Browser()
#     br.set_handle_robots(False)
#     br.set_handle_redirect(True)
#     br.set_handle_referer(True)
#     br.set_handle_equiv(True)
#     br.open(login_url)

#     cookiejar = br._ua_handlers["_cookies"].cookiejar
#     cookies_before = {(cookie.name, cookie.domain, cookie.path) for cookie in cookiejar}

#     br.select_form(nr=0)

#     editable_controls = [
#         control for control in br.form.controls
#         if not control.readonly and control.type not in ["hidden", "submit"]
#     ]

#     if len(editable_controls) >= 2:
#         editable_controls[0].value = username_value
#         editable_controls[1].value = password_value
#     else:
#         raise HTTPException(status_code=400, detail="Formulaire de connexion incomplet")

#     br.submit()

#     cookies_after = list(cookiejar)
#     for cookie in cookies_after:
#         if (cookie.name, cookie.domain, cookie.path) in cookies_before:
#             cookiejar.clear(cookie.domain, cookie.path, cookie.name)
#     liste= [(cookie.name, cookie.value) for cookie in cookiejar]
#     cookies = "; ".join([f"{name}={value}" for name, value in liste])
#     return cookies

def get_cookies_after_login(res,login_url: str, username_value: str, password_value: str):
    br = mechanize.Browser()
    br.set_handle_robots(False)
    br.set_handle_redirect(True)
    br.set_handle_referer(True)
    br.set_handle_equiv(True)
    br.open(login_url)

    cookiejar = br._ua_handlers["_cookies"].cookiejar
    cookies_before = {(cookie.name, cookie.domain, cookie.path) for cookie in cookiejar}

    br.select_form(nr=0)

    editable_controls = [
        control for control in br.form.controls
        if not control.readonly and control.type not in ["hidden", "submit"]
    ]

    if len(editable_controls) >= 2:
        editable_controls[0].value = username_value
        editable_controls[1].value = password_value
    else:
        raise HTTPException(status_code=400, detail="Formulaire de connexion incomplet")

    br.submit()

    cookies_after = list(cookiejar)
    for cookie in cookies_after:
        if (cookie.name, cookie.domain, cookie.path) in cookies_before:
            cookiejar.clear(cookie.domain, cookie.path, cookie.name)

    with open("C:/Users/Desktop/cookies/cookie.txt", "w") as txt_file:
        for cookie in cookiejar:
            txt_file.write(f"{cookie.name}={cookie.value}\n")

    # Enregistrer en format JSON (cookie.json)
    cookies_json = []
    for cookie in cookiejar:
        cookie_data = {
            "domain": cookie.domain,
            "name": cookie.name,
            "path": cookie.path,
            "secure": cookie.secure,
            "value": cookie.value,
            "expires": cookie.expires,
            "httpOnly": getattr(cookie, "httponly", False),
        }
        cookies_json.append(cookie_data)

    with open("C:/Users/Desktop/cookies/cookie.json", "w") as json_file:
        json.dump(cookies_json, json_file, indent=4)

    return cookiejar




def dynamic_authentication(login_url: str, username: str, password: str):
    chrome_path = "C:\\Users\\Rihab-Cherni\\ZAP\\webdriver\\windows\\64\\chromedriver.exe"
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')

    service = Service(chrome_path)
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(login_url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "uname"))
        )

        driver.find_element(By.NAME, "uname").send_keys(username)
        driver.find_element(By.NAME, "pass").send_keys(password)
        driver.find_element(By.XPATH, "//input[@type='submit']").click()

        WebDriverWait(driver, 10).until(EC.url_changes(login_url))

        cookies = driver.get_cookies()
        cookie_header = "; ".join([f"{c['name']}={c['value']}" for c in cookies])
        print("✅ Cookies récupérés :", cookie_header)
        return cookie_header

    except Exception as e:
        print("❌ Erreur durant l'authentification :", e)
        raise HTTPException(status_code=500, detail="Échec de l'authentification dynamique")

    finally:
        driver.quit()
