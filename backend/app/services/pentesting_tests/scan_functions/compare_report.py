from datetime import datetime
import os
import json
from collections import defaultdict
from pathlib import Path

class CompareReport:
    def __init__(self, report_path,  unique_id, url, startTime, authentification):
        self.report_path = report_path
        self.final_report = defaultdict(list)
        self.tools_used = set() 
        self.unique_id = unique_id
        self.url = url
        self.startTime = startTime
        self.authentification = authentification
        self.total_vulnerabilities = 0
        self.total_High = self.total_Medium = self.total_Low = self.total_Informational = 0
        self.vulnerability_mapping = self.get_vulnerability_mapping()
        self.host_metadata = []

    def get_vulnerability_mapping(self):
        for path in Path('.').rglob('vulnerabilities_model/vulnerability_mapping.json'):
            try:
                with open(path, "r", encoding="utf-8") as file:
                    return json.load(file)
            except json.JSONDecodeError as e:
                print(f"❌ Erreur JSON : {e}")
        print("❌ Fichier de mapping non trouvé.")
        return {}
    
    def find_vuln_name(self, vuln_name):
        for key, value in self.vulnerability_mapping.items():
            if "aliases" in value and vuln_name in value["aliases"]:
                return key
        return vuln_name
    
    def find_vuln_tools(self, vuln_name):
        for key, value in self.vulnerability_mapping.items():
            if "aliases" in value and vuln_name in value["aliases"]:
                return value["tools"]
        return []

    def merge_report(self, report_file, tool_name):
        with open(report_file, 'r', encoding='utf-8') as f:
            report = json.load(f)
            for vuln_name, vuln_data in report.items():
                mapped_vuln_name = self.find_vuln_name(vuln_name)
                if isinstance(vuln_data, list):
                    count = vuln_data[0] if isinstance(vuln_data[0], int) else 0
                    details = vuln_data[1] if isinstance(vuln_data[1], list) else []
                    comm_details = vuln_data[2] if len(vuln_data) > 2 and isinstance(vuln_data[2], dict) else {}
                    if isinstance(count, int) and isinstance(details, list):
                        for detail in details:
                            if "real_name" not in detail or not isinstance(detail["real_name"], list):
                                detail["real_name"] = []
                            detail["real_name"].append(vuln_name)

                            if "detected_by" not in detail or not isinstance(detail["detected_by"], list):
                                detail["detected_by"] = []
                            if tool_name not in detail["detected_by"]:
                                detail["detected_by"].append(tool_name)
                    else:
                        print(f"⚠️ Format inattendu pour {vuln_name}")
                    self.final_report[mapped_vuln_name].append([count, details, comm_details])                    
                else:
                    print(f"⚠️ Données mal formatées pour {vuln_name}: {vuln_data}")

    def load_reports(self):
        if not os.path.exists(self.report_path):
            print(f"❌ Le dossier {self.report_path} n'existe pas.")
            return
        for file_name in os.listdir(self.report_path):
            if file_name.endswith(".json"):
                file_path = os.path.join(self.report_path, file_name)
                tool_name = os.path.splitext(file_name)[0]
                self.tools_used.add(tool_name) 
                if tool_name.lower() in ["whatweb", "wafw00f"]:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        report = json.load(f)
                        self.other_data = report
                        if isinstance(report, list):
                            self.host_metadata.extend(report)
                else:
                    self.merge_report(file_path, tool_name)

    def merge_vulnerabilities(self, data):
        report = []
        for vuln_name, reports in data.items():  
            total_count = 0
            merged_vulnerabilities = {}
            all_comm = []
            for entry in reports:  
                if len(entry) > 0 and isinstance(entry[0], int):
                    total_count += entry[0]
                if len(entry) > 1 and isinstance(entry[1], list):
                    for vuln in entry[1]:
                        parameter_keys = set(vuln.get("parameters", {}).keys())
                        key = (
                            vuln.get("method", ""),
                            vuln.get("url", ""),
                            json.dumps(sorted(parameter_keys)) 
                        )
                        if key in merged_vulnerabilities:
                            existing_vuln = merged_vulnerabilities[key]
                            if isinstance(existing_vuln["attack"], list):
                                if vuln.get("attack") and vuln["attack"] not in existing_vuln.get("attack", []):
                                    existing_vuln["attack"].append(vuln["attack"])
                            else:
                                existing_vuln["attack"] = [existing_vuln["attack"], vuln["attack"]]
                            existing_vuln["detected_by"].extend(vuln["detected_by"])
                            existing_vuln["detected_by"] = list(set(existing_vuln["detected_by"]))
                        else:
                            vuln_copy = vuln.copy()
                            vuln_copy["attack"] = [vuln_copy.get("attack", "")]
                            vuln_copy["real_name"] = vuln_copy["real_name"] if "real_name" in vuln_copy else []
                            merged_vulnerabilities[key] = vuln_copy
                if len(entry) > 2 and isinstance(entry[2], dict) and entry[2]:                        
                    all_comm.append(entry[2])

            self.total_vulnerabilities+=total_count
            report.append({
                vuln_name: {
                    "total": total_count,
                    "vulnerabilities": list(merged_vulnerabilities.values()),
                    "details": all_comm
                }
            })
        return report
       
    def calculate_confidence_scores(self):
        for vuln_name, data in self.final_report.items():
            tools = self.find_vuln_tools(vuln_name)
            total_tools = len(tools)
            data["all_tools"]=tools
            confidence= ""
            risk= ""
            if "details" in data and isinstance(data["details"], list):
                for d in data["details"]:
                    confidence = d.get("confidence", "")
                    risk=   d.get("risk", "")
            data["risk"]=risk
            for v in data["vulnerabilities"]:  
                detected_tools = len(v["detected_by"])
                confidence_score = confidence_score = (detected_tools / total_tools) * 100 if total_tools else 0   
                v["confidence_score"] = round(confidence_score, 2)
                v.setdefault("last_confidence_score", 0)
                conf_mapping = {
                    "False Positive": 0,
                    "Low": max(v["confidence_score"], 25), 
                    "Medium": max(v["confidence_score"], 50),  
                    "High": min(v["confidence_score"], 75),  
                    "Confirmed": 100  
                }
                v["last_confidence_score"] = conf_mapping.get(v.get("confidence", ""), v["confidence_score"])
                v["confidence"] = confidence
                v["risk"] = risk

    def save_final_report(self):
        merged_report = self.merge_vulnerabilities(self.final_report)
        self.final_report = {vuln_name: data for item in merged_report for vuln_name, data in item.items()}
        self.calculate_confidence_scores() 
        for vuln_name, reports in self.final_report.items():
            if reports["risk"] == "High":
                self.total_High += reports["total"]
            elif reports["risk"] == "Medium":
                self.total_Medium += reports["total"]
            elif reports["risk"] == "Low":
                self.total_Low += reports["total"]
            elif reports["risk"] == "Informational":
                self.total_Informational += reports["total"]
        end_time = datetime.now()
        duration = end_time - datetime.strptime(self.startTime, '%Y-%m-%d %H:%M:%S')

        details={
          "id":  self.unique_id,
          "authentification":  self.authentification,          
          "url":self.url,
          "start_scan_date":self.startTime,
          "last_scan_date": end_time.strftime('%Y-%m-%d %H:%M:%S'),
          "scan_duration": str(duration), 
          "number_vulnerabilities": self.total_vulnerabilities,
          "total_High": self.total_High,
          "total_Medium": self.total_Medium,
          "total_Low": self.total_Low,
          "total_Informational": self.total_Informational,
          "tools_used":  list(self.tools_used)
        } 
        self.final_report= {"details":details, "vulnerability_categories": self.final_report, "host_metadata": self.host_metadata}
        output_file = os.path.join(self.report_path, "final_report.json")
        with open(output_file, "w", encoding="utf-8") as file:
            json.dump(self.final_report, file, indent=4, ensure_ascii=False)
        print(f"✅ Rapport final sauvegardé sous : {output_file}")
        